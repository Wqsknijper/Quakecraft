package dev.nidocraft.net;import dev.nidocraft.net.Enums.PlayerStates;import dev.nidocraft.net.Gamemanager.GameCache;import dev.nidocraft.net.Gamemanager.PlayerData;import dev.nidocraft.net.Gamemanager.WorldProtection;import dev.nidocraft.net.Utils.GameUtils;import dev.nidocraft.net.Utils.PlayerUtils;import dev.nidocraft.net.Utils.SpawnUtils;import org.bukkit.Bukkit;import org.bukkit.Material;import org.bukkit.boss.BarColor;import org.bukkit.boss.BarStyle;import org.bukkit.boss.BossBar;import org.bukkit.configuration.InvalidConfigurationException;import org.bukkit.configuration.file.FileConfiguration;import org.bukkit.configuration.file.YamlConfiguration;import org.bukkit.entity.Player;import org.bukkit.plugin.java.JavaPlugin;import org.bukkit.scheduler.BukkitRunnable;import java.io.File;import java.io.IOException;public class Main extends JavaPlugin {    @Override    public void onEnable(){        createCustomConfig();        SpawnUtils.generateSpawns((int) getValueFromPath("minX"), (int) getValueFromPath("maxX"), (int) getValueFromPath("minZ"), (int) getValueFromPath("maxZ"), (int) getValueFromPath("minY"), (int) getValueFromPath("max-players"));        regEvents();        getLogger().info("Enabled");        Bukkit.getScheduler().runTaskTimer(this, new BukkitRunnable() {            @Override            public void run() {                Bukkit.getOnlinePlayers().stream().filter(p -> PlayerData.getCache(p).getState() != PlayerStates.PLAYING || (PlayerData.getCache(p).getLastShoot() + ((int) getValueFromPath("shoot-delay") * 1000)) >= System.currentTimeMillis() || p.getItemInHand().getType() != Material.STICK).forEach(p -> {                    BossBar bossBar = Bukkit.createBossBar("§d§lReloading!", BarColor.GREEN, BarStyle.SOLID);                    bossBar.setProgress(GameUtils.getProgress(p));                    bossBar.addPlayer(p);                });                if (System.currentTimeMillis() + 300000 <= GameCache.startTime) GameUtils.gameEndManager();            }        }, 1L, 10L);    }    void regEvents() {        getServer().getPluginManager().registerEvents(new PlayerUtils(), this);        getServer().getPluginManager().registerEvents(new WorldProtection(), this);    }    /* Coniguration */    private File customConfigFile;    private static FileConfiguration p;    private void createCustomConfig() {        customConfigFile = new File(getDataFolder(), "config.yml");        if (!customConfigFile.exists()) {            customConfigFile.getParentFile().mkdirs();            saveResource("config.yml", false);        }        p = new YamlConfiguration();        try {            p.load(customConfigFile);        } catch (IOException | InvalidConfigurationException e) {            e.printStackTrace();        }    }    public static Object getValueFromPath(String path) {        return p.get(path);    }}